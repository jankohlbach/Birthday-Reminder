(()=>{"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("/service-worker.js").then(reg=>{console.log("Successfully registered service worker",reg)}).catch(err=>{console.error("Error whilst registering service worker",err)})});const scrollToTop=function scrollToTop(){const start=window.pageYOffset,startTime="now"in window.performance?performance.now():(new Date).getTime(),endPoint=0,duration=600,scroll=function scroll(){const now="now"in window.performance?performance.now():(new Date).getTime(),time=Math.min(1,(now-startTime)/600),timeFunction=time<.5?2*time*time:(4-2*time)*time-1;window.scroll(0,Math.ceil(timeFunction*(0-start)+start)),0!==window.pageYOffset&&requestAnimationFrame(scroll)};scroll()};(()=>{class Event{constructor(){this.events=[],this.CACHE_STORAGE_KEY="data-cache",this.validateDay=this.validateDay.bind(this),this.validateMonth=this.validateMonth.bind(this),this.handleSubmit=this.handleSubmit.bind(this),this.handleButtonClick=this.handleButtonClick.bind(this),this.initApp()}setCacheStorage(entry){const dbRequest=indexedDB.open(this.CACHE_STORAGE_KEY);dbRequest.onsuccess=()=>{const db=dbRequest.result,transaction=db.transaction("events","readwrite"),objectStore=transaction.objectStore("events");objectStore.put(entry)}}deleteElementInCache(hash){const dbRequest=indexedDB.open(this.CACHE_STORAGE_KEY);dbRequest.onsuccess=()=>{const db=dbRequest.result,transaction=db.transaction("events","readwrite"),objectStore=transaction.objectStore("events");objectStore.delete(hash)}}static generateHash(){const currentDate=(new Date).getTime(),random=Math.floor(100*Math.random()),hash=currentDate.toString()+random.toString();return hash}validateDay(){this.MONTHS_31.includes(this.monthInput.value)?[this.MONTH_OPTION_30,this.MONTH_OPTION_31].forEach(option=>option.removeAttribute("disabled")):(this.MONTH_OPTION_31.setAttribute("disabled",""),"02"===this.monthInput.value?this.MONTH_OPTION_30.setAttribute("disabled",""):this.MONTH_OPTION_30.removeAttribute("disabled"))}validateMonth(){switch(this.dayInput.value){case"30":this.MONTH_OPTION_2.setAttribute("disabled",""),this.MONTHS_30_OPTIONS.forEach(option=>option.removeAttribute("disabled"));break;case"31":this.MONTH_OPTION_2.setAttribute("disabled",""),this.MONTHS_30_OPTIONS.forEach(option=>option.setAttribute("disabled",""));break;default:this.MONTH_OPTION_2.removeAttribute("disabled"),this.MONTHS_30_OPTIONS.forEach(option=>option.removeAttribute("disabled"))}}static sortList(array){array.sort((a,b)=>a.month>b.month?1:a.month<b.month?-1:a.month===b.month?a.day>b.day?1:a.day<b.day?-1:0:0)}initNodeElements(){this.form=document.querySelector("form"),this.dayInput=this.form.querySelector("#day"),this.monthInput=this.form.querySelector("#month"),this.yearInput=this.form.querySelector("#year"),this.nameInput=this.form.querySelector("#name"),this.infoInput=this.form.querySelector("#info"),this.submit=this.form.querySelector("button"),this.list=document.querySelector(".list"),this.listCurrent=this.list.querySelector(".current-year"),this.listNext=this.list.querySelector(".next-year")}initYearInput(){const currentYear=(new Date).getFullYear();for(let i=0;i<=100;i+=1){const option=document.createElement("option"),yearToAdd=currentYear-i;option.value=yearToAdd,option.textContent=yearToAdd,this.yearInput.appendChild(option)}}setUpMonthVariables(){this.MONTH_NAMES=["January","February","March","April","May","June","July","August","September","October","November","December"],this.MONTHS_30=["04","06","09","11"],this.MONTHS_31=["01","03","05","07","08","10","12"],this.MONTHS_30_OPTIONS=this.MONTHS_30.map(month=>this.monthInput.querySelector(`option[value="${month}"]`)),this.MONTH_OPTION_2=this.monthInput.querySelector('option[value="02"]'),this.MONTH_OPTION_30=this.dayInput.querySelector('option[value="30"]'),this.MONTH_OPTION_31=this.dayInput.querySelector('option[value="31"]')}setUpEventListeners(){this.dayInput.addEventListener("change",this.validateMonth),this.monthInput.addEventListener("change",this.validateDay),this.form.addEventListener("submit",this.handleSubmit),this.list.addEventListener("click",this.handleButtonClick)}initDB(){if(!("indexedDB"in window))return void console.log("This browser does not support IndexedDB");const dbRequest=indexedDB.open(this.CACHE_STORAGE_KEY,1);dbRequest.onupgradeneeded=()=>{const db=dbRequest.result;if(!db.objectStoreNames.contains("events")){const eventOS=db.createObjectStore("events",{keyPath:"hash"});eventOS.createIndex("day","day",{unique:!1}),eventOS.createIndex("month","month",{unique:!1}),eventOS.createIndex("year","year",{unique:!1}),eventOS.createIndex("name","name",{unique:!1}),eventOS.createIndex("info","info",{unique:!1})}}}initApp(){this.initNodeElements(),this.initYearInput(),this.setUpMonthVariables(),this.setUpEventListeners(),this.initDB(),this.updateList()}getFormData(e){return e.preventDefault(),{day:this.dayInput.value,month:this.monthInput.value,year:this.yearInput.value,name:this.nameInput.value,info:this.infoInput.value,hash:Event.generateHash()}}updateList(){const dbRequest=indexedDB.open(this.CACHE_STORAGE_KEY);dbRequest.onsuccess=()=>{const db=dbRequest.result,transaction=db.transaction("events","readonly"),objectStore=transaction.objectStore("events"),osRequest=objectStore.getAll();osRequest.onsuccess=()=>{this.events=osRequest.result,this.displayList()}}}displayList(){Event.sortList(this.events);const date=new Date,currentDay=date.getDate(),currentMonth=date.getMonth()+1,currentYear=date.getFullYear();[this.listCurrent,this.listNext].forEach(list=>{list.innerHTML=""});let month=null;this.events.forEach(event=>{const eventDay=parseInt(event.day,10),eventMonth=parseInt(event.month,10),monthElement=document.createElement("h3");monthElement.classList.add("date"),monthElement.innerHTML=`\n            <span class="month">${this.MONTH_NAMES[parseInt(event.month,10)-1]}</span>\n            <span class="year">${eventMonth>currentMonth||eventMonth===currentMonth&&eventDay>=currentDay?currentYear:currentYear+1}</span>\n          `;const listElement=document.createElement("div");listElement.classList.add("list-item"),eventMonth===currentMonth&&eventDay===currentDay&&listElement.classList.add("today"),listElement.id=event.hash,listElement.innerHTML=`\n            <span class="day">${event.day}</span>\n            <div class="container">\n              <span class="name">${event.name}</span>\n              ${""!==event.year?`<span class="age">                    ${eventMonth>currentMonth||eventMonth===currentMonth&&eventDay>=currentDay?eventDay===currentDay?`turns ${currentYear-event.year}`:`age: ${currentYear-event.year-1}`:`age: ${currentYear-event.year}`}\n                  </span>`:""}\n            </div>\n            <div class="buttons">\n              <button class="buttons-edit"><span class="invisible">Edit</span></button><button class="buttons-delete"><span class="invisible">Delete</span></button>\n            </div>\n          `,eventMonth<currentMonth?this.listNext.append(eventMonth===month?listElement:monthElement,listElement):eventMonth>currentMonth?this.listCurrent.append(eventMonth===month?listElement:monthElement,listElement):eventDay<currentDay?this.listNext.append(eventMonth===month?listElement:monthElement,listElement):eventMonth===month?(""===this.listCurrent.innerHTML&&this.listCurrent.append(monthElement,listElement),this.listCurrent.append(listElement)):this.listCurrent.append(monthElement,listElement),month=eventMonth})}handleSubmit(e){const newEntry=this.getFormData(e);this.events.push(newEntry),this.setCacheStorage(newEntry),this.updateList(),this.form.reset()}changeData(hashToChange){const headline=this.form.previousElementSibling,headlineReset=headline.textContent,submitReset=this.submit.textContent,indexToChange=this.events.findIndex(event=>event.hash===hashToChange),elementToChange=this.events[indexToChange];headline.textContent="Change entry",this.submit.textContent="Change",this.dayInput.value=elementToChange.day,this.monthInput.value=elementToChange.month,this.yearInput.value=elementToChange.year,this.nameInput.value=elementToChange.name,this.infoInput.value=elementToChange.info,scrollToTop(),this.events.splice(indexToChange,1),this.deleteElementInCache(hashToChange);const resetFormText=this.form.addEventListener("submit",()=>{headline.textContent=headlineReset,this.submit.textContent=submitReset,this.form.removeEventListener("submit",resetFormText)})}handleButtonClick(e){if("button"!==e.target.tagName.toLowerCase())return;const button=e.target;if(button.classList.contains("buttons-delete")){const hashToDelete=button.parentNode.parentNode.id;if(""!==hashToDelete){const indexToDelete=this.events.findIndex(event=>event.hash===hashToDelete);this.events.splice(indexToDelete,1),this.deleteElementInCache(hashToDelete),this.updateList()}}else if(button.classList.contains("buttons-edit")){const hashToChange=button.parentNode.parentNode.id;this.changeData(hashToChange)}}}window.addEventListener("load",()=>{const event=new Event})})()})();
//# sourceMappingURL=main.min.js.map